datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  name           String?
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  preferences    Json?
  collaborations Collaboration[]
  notifications  Notification[]
  ownedCapsules  Capsule[]
}

model MediaContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  capsuleId String   @unique @db.ObjectId // Added @unique constraint
  capsule   Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
  text      String?
  images    Json
  videos    Json
  totalSize Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Capsule {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  ownerId        String          @db.ObjectId
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  aiOutput       AIOutput?
  mediaContent   MediaContent?
  title          String
  description    String?
  unlockDate     DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isReady        Boolean         @default(false)
  accessLog      Json?
  expiresAt      DateTime?
  collaborations Collaboration[]

  @@index([ownerId, isReady, unlockDate])
}

model Collaboration {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  capsuleId String    @db.ObjectId
  capsule   Capsule   @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String    @default("viewer")
  invitedAt DateTime  @default(now())
  status    String    @default("pending")
  expiresAt DateTime?

  @@unique([capsuleId, userId])
}

model AIOutput {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  capsuleId   String   @unique @db.ObjectId
  capsule     Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
  type        String
  content     String?
  audioUrl    String?
  metadata    Json?
  generatedAt DateTime @default(now())
  videoUrl    String?

  @@index([capsuleId, type])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  content   Json
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, isRead])
}
